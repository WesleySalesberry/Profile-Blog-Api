openapi: 3.0.0
info:
  title: Profile API
  description: A simple CRUD API that can be used to display projects that you created and write simple blogs about them or use as a stand alone API for ether. 
  version: 'v1.0.0'
  termsOfService: https://smartbear.com/terms-of-use/
  contact:
    email: wesley.salesberry@hotmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
- url: http://localhost:5000/api/v1
  variables: {}
paths:
  /auth/login:
    post:
      tags:
      - Auth
      summary: Login A User
      description: After logging in, click the "Authorize" button and add the token in the response to the input and click Authorize
      operationId: LoginInRoute
      requestBody:
        description:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInRoute'
            example:
              email: demo@email.com
              password: "123456"
        required: true
      responses:
        200:
          description: ''
          header: {}
      deprecated: false
  /auth/logout:
    get:
      tags:
      - Auth
      summary: Logout
      operationId: Logout
      parameters:
      - name: Content-Type
        in: header
        description: ''
        required: true
        style: simple
        schema:
          type: string
          example: application/json
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /project:
    get:
      tags:
      - Projects
      summary: Returns all projects
      description: This route returns all projects and does not require the user to be logged in to see all projects. 
      operationId: Getallprojects
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    post:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Projects
      summary: Create a project
      description: This route is only accessable when the user is logged in and creates a project
      operationId: Createaproject
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Createaproject'
            example:
              name: Project 5
              description: Some cool stuff this project does
              languages: Javascript, HTML, CSS
              website: http://example.com/
              github: https://github.com
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /project/{projectID}:
    get:
      tags:
      - Projects
      summary: Gets a single project
      description: This route returns a single project and does not require the user to be logged in. 
      operationId: Getsasingleproject
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: string
            minimum: 1
          description: The project's ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Updatesaproject'
            example:
              name: Projects Name
              description: Some cool stuff that project does
              languages: Javacript, Django, HTML
              website: Were the project is hosted
              github: Github Repo
        required: true  
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    put:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Projects
      summary: Updates a project
      description: Requires the user to be logged in to be able to update a project
      operationId: Updatesaproject
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: string
            minimum: 1
          description: The project's ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Updatesaproject'
            example:
              name: Projects Name
              description: Some cool stuff that project does
              languages: Javacript, Django, HTML
              website: Were the project is hosted
              github: Github Repo
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    delete:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Projects
      summary: Deletes a project
      description: User must be logged in to be able to delete a project
      operationId: Delete
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: string
            minimum: 1
          description: The project's ID
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /blog:
    get:
      tags:
      - Blog
      summary: All published Blogs
      description: You do not need to be logged in to get all blogs, This route returns all published blog post 
      operationId: AllpublishedBlogs
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    post:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Blog
      summary: Create a blog post
      description: The user must be logged in to access this route. This routes creates a blog post, the default isPublished is set to false.
      operationId: Createablogpost
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Createablogpost'
            example:
              title: Testing loging out 2
              body: Some text that that is in the blog
              tags: Java, C++, Python Javascript
              isPublished: false
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /blog/unpublished:
    get:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Blog
      summary: All unpublished blogs
      description: User must be logged in to gain access to all unpublished blog post
      operationId: Allunpublishedblogs
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /blog/{blogID}:
    get:
      tags:
      - Blog
      summary: Returns a single blog post
      description: No log in required to see a single blog by id with all comments
      operationId: Get a single blog post
      parameters:
        - in: path
          name: blogID
          required: true
          schema:
            type: string
            minimum: 1
          description: The blog post ID
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    put:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Blog
      summary: Update Blog Post
      operationId: Requires authorization to access update a blog post
      parameters:
        - in: path
          name: blogID
          required: true
          schema:
            type: string
            minimum: 1
          description: The blog post ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlogpost'
            example:
              isPublished: false
              tags: javascript
              title: Blog Test Zero
              body: Some text that that is in the blog 0
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
    delete:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Blog
      summary: Delete A Blog Post
      description: Requires authorization to be able to delete a blog post
      operationId: DeleteABlogPost
      parameters:
        - in: path
          name: blogID
          required: true
          schema:
            type: string
            minimum: 1
          description: The blog post ID
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /blog/image/{blogID}:
    put:
      security:
        - {}
        - bearerAuth: []
      tags:
      - Blog
      summary: Add an image
      description: Add an image
      operationId: Addanimage
      parameters:
        - in: path
          name: blogID
          required: true
          schema:
            type: string
            minimum: 1
          description: The blog post ID
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
  /blog/comment/{blogID}:
    post:
      tags:
      - Comments
      summary: Creates a comment
      description: You do not need authorization to make a Comment.
      operationId: Creates a Comment
      parameters:
        - in: path
          name: blogID
          required: true
          schema:
            type: string
            minimum: 1
          description: The blog post ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Createsacomment'
            example:
              name: This comment goes to delete blog test
              email: test@email.com
              comment: The body of the comment
        required: true
      responses:
        200:
          description: ''
          headers: {}
      deprecated: false
components:
  schemas:
    LoginInRoute:
      title: Log In Route
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: demo@email.com
        password: 123456
    Createaproject:
      title: Create A Project
      required:
      - name
      - description
      - languages
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        languages:
          type: string
        website:
          type: string
        github:
          type: string
      example:
        name: Project Name
        description: Some cool stuff this project does
        languages: Javascript, HTML, CSS
        website: The projects website
        github: Users Github Link
    Updatesaproject:
      title: Update A Project
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        languages:
          type: string
        website:
          type: string
        github:
          type: string
      example:
        name: Change the name
        description: Some cool stuff that the project does
        website: Change the website
        github: Change the link to the repo
    Createablogpost:
      title: Create a blog post
      required:
      - title
      - body
      - isPublished
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        tags:
          type: string
        isPublished:
          type: string
      example:
        title: Blog Title
        body: Blog Content
        tags: Java, C++, Python Javascript
        isPublished: false
    UpdateBlogpost:
      title: Update Blog Post
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        tags:
          type: string
        isPublished:
          type: string
      example:
        title: Change the title
        body: Edit the body of the blog
        tags: Add tags
        isPublished: Change from true to false or vice versa
    Createsacomment:
      title: Adds a comment to a blog post
      type: object
      required:
        - email
        - comment
      properties:
        name:
          type: string
        email:
          type: string
        comment:
          type: string
      example:
        name: Name of person makeing the comment
        email: someone@email.com
        comment: Body of the comment
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
security:
- bearerAuth: []
tags:
- name: Auth
- name: Projects
- name: Blog
- name: Comments